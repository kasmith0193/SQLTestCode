CREATE DATABASE CECSProject;

CREATE USER 'cecs535'@'%' IDENTIFIED BY 'taforever';

-- all tables need to be reviewed for the statment specified under the attributes in the HW document
-- figure out how to use "-" instead of "_"
USE CECSProject;
-- -------------------------------------------hotel----------------------------------------------
-- DONE DONE hotelid is the primary key
--  Attribute amenities gives the amenities available at the hotel, separated by commas (for instance, “pool,restaurant,gym”)
CREATE TABLE HOTEL(
	hotelid int AUTO_INCREMENT NOT NULL,
	address varchar(100),
	`manager-name` varchar(50),
	`number-rooms` int,
	amenities varchar(200),
	PRIMARY KEY(hotelid)
);

-- -------------------------------------------room------------------------------------------------
-- DONE DONE make number and `hotel-id` primary key
-- DONE DONE make `hotel-id` foreign key to hotel
-- DONE DONE maket he below trigger restrictions
	-- DONE DONE I THINK type is one of ’regular’, ’extra’, ’suite’, ’business’, ’luxury’, ’family
	-- DONE DONE The occupancy is the number of people (always 1 to 5) who can sleep on a room
	-- DONE DONE Number of beds is always 1, 2 or 3
	-- DONE DONE type-beds is one of ’queen’, ’king’, ’full’
	-- DONE DONE price is a number (always a positive number, of course)
CREATE TABLE ROOM(
	number int NOT NULL,
	type varchar(10),
	occupancy int,
	`number-beds` int,
	`type-beds` varchar(100),
	price decimal(6,2),
	`hotel-id` int NOT NULL,
	PRIMARY KEY(number, `hotel-id`),
	FOREIGN KEY(`hotel-id`) REFERENCES HOTEL(hotelid)
);

delimiter //
CREATE TRIGGER room_tuple_correct BEFORE INSERT ON ROOM FOR EACH ROW
BEGIN
		IF (NOT(NEW.type =  'regular'
		OR NEW.type =  'extra'
		OR NEW.type =  'suite'
		OR NEW.type =  'business'
		OR NEW.type =  'luxury'
		OR NEW.type =  'family')
    AND NOT( NEW.occupancy < 5
    OR NEW.occupancy > 1)
    AND NOT(NEW.`number-beds` < 3
    OR NEW.`number-beds` > 1)
    AND NOT (NEW.`type-beds` = 'queen'
		OR NEW.`type-beds` =  'king'
		OR NEW.`type-beds` =  'full')
	  AND (NEW.price > 0))
		THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT='Values dont match required standard check Room Type, Occupancy, Number of Beds,  Bed Type, or Price';
			END IF;
END;//
delimiter ;


-- -------------------------------------------customer----------------------------------------------
-- DONE DONE cust-id is the primary key and
-- DONE DONE should be generated by the system
-- DONE DONE status is one ’gold’, ’silver’, ’business’.
CREATE TABLE CUSTOMER(
	`cust-id` int AUTO_INCREMENT NOT NULL,
	name varchar(50),
	street varchar(50),
	city varchar(50),
	zip varchar(15),
	status varchar(50),
	PRIMARY KEY(`cust-id`)
);

DELIMITER //
CREATE TRIGGER cust_type BEFORE INSERT ON CUSTOMER
FOR EACH ROW

	IF (!(NEW.status = 'gold'
	OR NEW.status = 'silver'
	OR NEW.status = 'business'))
		THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT='Status is not equal to "gold", "silver" or "business"';
	END IF;//
DELIMITER ;



-- -------------------------------------------reservation----------------------------------------------
-- DONE DONE choose a primary key
CREATE TABLE RESERVATION(
	hotelid int,
	`cust-id` int,
	`room-number`int,
	`begin-date` date,
	`end-date` date,
	`credit-card-number` varchar(25),
	`exp-date` date,
	PRIMARY KEY(hotelid, `cust-id`, `room-number`, `begin-date`)
);





delimiter //
CREATE TRIGGER rev_update before INSERT ON RESERVATION
FOR EACH ROW
BEGIN
	SELECT  DATEDIFF(NEW.`end-date`, NEW.`begin-date`)
	INTO @num;

	SELECT price
	INTO @price FROM ROOM WHERE `hotel-id` = NEW.hotelid AND number = NEW.`room-number`;

	SELECT SUM(@num*@price+r.total)
	INTO @total FROM REVENUE as r WHERE r.hotelid = NEW.hotelid;

	UPDATE REVENUE SET total = round(@total, 2)
	WHERE hotelid = NEW.hotelid;


END;//
delimiter ;





CREATE TABLE REVENUE(
		hotelid int,
    total float,
    FOREIGN KEY(hotelid) REFERENCES HOTEL(hotelid)
);

delimiter //
CREATE PROCEDURE Occupancy(IN `number-id` int, IN `date`date, OUT num int)
BEGIN
	SELECT Count(*)
	INTO num FROM RESERVATION as r
	Where r.hotelid = `number-id`
		AND r.`begin-date`< `date`
		AND r.`end-date` > `date`;
END;//
delimiter ;
